#!/bin/sh
#
# awsprofile allows for easy management and switching between your multiple AWS
# profiles, in a lightweight, POSIX compatible shell script, that gives you a
# lot of granularity and easy integration into your dotfiles.
#
# Source               https://github.com/kris-anderson/awsprofile
# File bugs on GitHub  https://github.com/kris-anderson/awsprofile/issues
#
# MIT License
#
# Copyright (c) 2021 Kris Anderson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

############################
## colors and font weight ##
############################

if [ -t 1 ]; then
    GREEN=$(tput setaf 2)
    BLUE=$(tput setaf 4)
    YELLOW=$(tput setaf 3)
    RED=$(tput setaf 1)
    BOLD=$(tput bold)
    RESET_FONT=$(tput sgr0)
else
    GREEN=""
    BLUE=""
    YELLOW=""
    RED=""
    BOLD=""
    RESET_FONT=""
fi

######################
## pretty functions ##
######################

arrow_icon() {
    printf "%s â‡’ %s\n" "${BOLD}${YELLOW}" "${RESET_FONT}${1}"
}

print_warning() {
    printf "%s** Warning **%s\n" "${BOLD}${YELLOW}" "${RESET_FONT}"
    printf "%s\n" "$1"
}

print_error() {
    printf "%s** Error **%s\n" "${BOLD}${RED}" "${RESET_FONT}"
    printf "%s\n" "$1"
}

ok() {
    printf "%s[ok]%s" "${BOLD}${GREEN}" "${RESET_FONT}"
}

failed() {
    printf "%s[failed]%s" "${BOLD}${RED}" "${RESET_FONT}"
}

error() {
    printf "%s[error]%s" "${BOLD}${RED}" "${RESET_FONT}"
}

#######################
## regular functions ##
#######################

get_profiles() {
    for config in "$HOME"/.aws/config.*; do
        CONFIG_FILE_PATH=$(realpath "$config")
        CONFIG_FILE_NAME=$(basename -- "$CONFIG_FILE_PATH")
        PROFILE_NAME="${CONFIG_FILE_NAME##*.}"
        if file_contains_aws_keys "$CONFIG_FILE_PATH"; then
            printf "%s\n" "${BLUE}$PROFILE_NAME${RESET_FONT}"
        else
            for credentials in $HOME/.aws/credentials.$PROFILE_NAME; do
                CREDENTIAL_FILE_PATH=$(realpath "$credentials")
                if file_contains_aws_keys "$CREDENTIAL_FILE_PATH"; then
                    printf "%s\n" "${BLUE}$PROFILE_NAME${RESET_FONT}"
                fi
            done
        fi
    done
}

list_profiles_fancy() {
    printf "%sAvailable profiles:%s\n" "${BOLD}" "${RESET_FONT}"
    get_profiles
}

list_profiles_simple() {
    get_profiles
}

default_aws_files_exist() {
    { test -f "$HOME/.aws/credentials" && test ! -L "$HOME/.aws/credentials"; } ||
        { test -f "$HOME/.aws/config" && test ! -L "$HOME/.aws/config"; }
}

setup_check() {
    if default_aws_files_exist; then
        print_error "awsprofile is not setup correctly"
        printf "\n%sPerform a full test with:%s\n" "${BOLD}" "${RESET_FONT}"
        printf "awsprofile doctor\n"
        exit 1
    fi
}

test_if_utility_installed() {
    test "$(command -v "$1")"
}

utility_installed_ok() {
    printf "%s\n" "$(ok) $1"
}

utility_installed_failed() {
    printf "%s - install \"%s\" from your package manager\n" "$(failed) $1" "$1"
}

aws_credentials_file_exists() {
    test -f "$HOME/.aws/credentials" && test ! -L "$HOME/.aws/credentials"
}

aws_config_file_exists() {
    test -f "$HOME/.aws/config" && test ! -L "$HOME/.aws/config"
}

awsprofile_config_exist() {
    test -n "$(find "$HOME/.aws/" -maxdepth 1 -name "config.*" -print -quit 2>/dev/null)"
}

awsprofile_config_list() {
    config in "$HOME"/.aws/config.*
}

awsprofile_config_contains_default() {
    head -n 1 "$CONFIG_FILE_PATH" | grep -wq "\[default\]"
}

file_contains_aws_keys() {
    grep -wq "aws_access_key_id\|aws_secret_access_key" "$1"
}

awsprofile_credential_exist() {
    test -e "$HOME/.aws/credentials.$PROFILE_NAME"
}

aws_config_is_symlink() {
    test -L "$HOME/.aws/config"
}

config_file_found() {
    test -e "$HOME/.aws/config.$1"
}

credential_file_found() {
    test -e "$HOME"/.aws/credentials."$1"
}

file_is_symlink() {
    test -L "$1"
}

print_command_missing() {
    setup_check
    print_warning "$1"
    printf "\n"
    printf "%sPrint available commands with:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "awsprofile help\n"
    exit 1
}

no_command_provided() {
    test $# -eq 0
}

empty_input() {
    test "$1" = ""
}

######################
## command: current ##
######################

if [ "$1" = "current" ]; then
    setup_check
    CONFIG_FILE_PATH=$(readlink "$HOME/.aws/config")
    CONFIG_SYMLINK_NAME=$(basename -- "$CONFIG_FILE_PATH")
    PROFILE_NAME="${CONFIG_SYMLINK_NAME##*.}"
    if aws_config_is_symlink; then
        printf "%sCurrent profile:%s\n" "${BOLD}" "${RESET_FONT}"
        printf "%s\n" "${BOLD}${GREEN}${PROFILE_NAME}${RESET_FONT}"
        exit 0
    else
        print_warning "Profile not set"
        printf "\n"
        printf "%sSet your profile with:%s\n" "${BOLD}" "${RESET_FONT}"
        printf "awsprofile set %sprofile_name%s\n" "${BLUE}" "${RESET_FONT}"
        printf "\n"
        list_profiles_fancy
        exit 1
    fi
fi

#####################
## command: doctor ##
#####################

if [ "$1" = "doctor" ]; then

    printf "%sChecking for required command line utilities%s\n" "${BOLD}" "${RESET_FONT}"

    required_utilities_list="basename find readlink realpath tr"
    printf "%s" "$required_utilities_list" | tr ' ' '\n' | while read -r utility_name; do

        if test_if_utility_installed "$utility_name"; then
            utility_installed_ok "$utility_name"
        else
            utility_installed_failed "$utility_name"
        fi

    done

    printf "\n"
    printf "%sChecking ~/.aws/ directory for default files%s\n" "${BOLD}" "${RESET_FONT}"

    if aws_credentials_file_exists; then
        printf "%s credentials should not exist\n" "$(failed)"
        printf "  %shint:%s move the file contents\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sfrom this:%s $HOME/.aws/credentials\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sto this:%s $HOME/.aws/config.your_profile_name\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sor this:%s $HOME/.aws/credentials.your_profile_name\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sthen delete:%s $HOME/.aws/credentials\n" "${BOLD}" "${RESET_FONT}"
    else
        printf "%s credentials should not exist\n" "$(ok)"
    fi

    if aws_config_file_exists; then
        printf "%s config should not exist\n" "$(failed)"
        printf "  %shint:%s move the file contents\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sfrom this:%s $HOME/.aws/config\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sto this:%s $HOME/.aws/config.your_profile_name\n" "${BOLD}" "${RESET_FONT}"
        printf "    %sthen delete:%s $HOME/.aws/config\n" "${BOLD}" "${RESET_FONT}"
    else
        printf "%s config should not exist\n" "$(ok)"
    fi

    printf "\n"
    printf "%sChecking ~/.aws/ for custom configuration files%s\n" "${BOLD}" "${RESET_FONT}"

    if awsprofile_config_exist; then

        for config in "$HOME"/.aws/config.*; do

            CONFIG_FILE_PATH=$(realpath "$config")
            CONFIG_FILE_NAME=$(basename -- "$CONFIG_FILE_PATH")
            PROFILE_NAME="${CONFIG_FILE_NAME##*.}"

            printf "\n"
            printf "  %sProfile:%s %s\n" "${BOLD}" "${RESET_FONT}" "${BOLD}${BLUE}${PROFILE_NAME}${RESET_FONT}"

            if awsprofile_config_contains_default; then
                printf "  %s %s contains [default] on line 1\n" "$(ok)" "$CONFIG_FILE_NAME"
            else
                printf "  %s (not found) %s contains [default] on line 1\n" "$(error)" "$CONFIG_FILE_NAME"
            fi

            if file_contains_aws_keys "$CONFIG_FILE_PATH"; then
                printf "  %s %s contains aws_access_key_id\n" "$(ok)" "$CONFIG_FILE_NAME"
                printf "  %s %s contains aws_secret_access_key\n" "$(ok)" "$CONFIG_FILE_NAME"
            else

                if awsprofile_credential_exist; then
                    if file_contains_aws_keys "$HOME/.aws/credentials.$PROFILE_NAME"; then
                        printf "  %s credentials.%s contains aws_access_key_id\n" "$(ok)" "$PROFILE_NAME"
                        printf "  %s credentials.%s contains aws_secret_access_key\n" "$(ok)" "$PROFILE_NAME"
                    else
                        printf "  %s (keys not found) credentials.%s contains keys\n" "$(error)" "$PROFILE_NAME"
                    fi
                else
                    printf "  %s (file not found) credentials.%s exists\n" "$(error)" "$PROFILE_NAME"
                fi
            fi

        done

    else

        print_warning "No profiles found"

    fi

    exit 0

fi

###################
## command: help ##
###################

if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    printf "%sUsage:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "  awsprofile <command> [options]\n"
    printf "\n"
    printf "%sCommands:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "  current             Show current profile\n"
    printf "  doctor              Checks for potential problems\n"
    printf "  help                Show this help message\n"
    printf "  initial-setup       Show initial setup instructions\n"
    printf "  list                List available profiles\n"
    printf "  set                 Set profile to [profile_name]\n"
    printf "  version             Show version\n"
    printf "\n"
    printf "%sOptions:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "  profile_name        Name of your custom profile\n"
    printf "\n"
    printf "%sExample usage:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "  awsprofile current\n"
    printf "  awsprofile list\n"
    printf "  awsprofile set personal\n"
    printf "  awsprofile set work\n"
    exit 0
fi

###################
## command: list ##
###################

if [ "$1" = "list" ]; then
    setup_check
    list_profiles_fancy
    exit 0
fi

#########################################
## command: autocomplete-profile-names ##
#########################################

if [ "$1" = "autocomplete-profile-names" ]; then
    list_profiles_simple
    exit 0
fi

##################
## command: set ##
##################

if [ "$1" = "set" ]; then
    setup_check
    if empty_input "$2"; then
        print_warning "No profile name provided"
        printf "\n"
        printf "%sprofile_name is required with the set command:%s\n" "${BOLD}" "${RESET_FONT}"
        printf "awsprofile set profile_name\n"
        printf "\n"
        printf "%sView available profiles with:%s\n" "${BOLD}" "${RESET_FONT}"
        printf "awsprofile list\n"
        exit 1
    elif ! config_file_found "$2"; then
        print_warning "Profile not found:"
        printf "%s/.aws/config.%s\n" "$HOME" "$2"
        printf "\n"
        printf "Make sure that file exists.\n"
        exit 1
    elif ! file_contains_aws_keys "$HOME/.aws/config.$2"; then
        if ! credential_file_found "$2"; then
            print_warning "Profile mis-configured"
            printf "\n"
            printf "Your config file does not contain your AWS credentials:\n"
            printf "%s/.aws/config.%s" "$HOME" "$2"
            printf "\n"
            printf "This file does not exist:\n"
            printf "%s/.aws/credentials.%s\n" "$HOME" "$2"
            printf "\n"
            printf "Either add your credentials to your config.%s, or create\n" "$2"
            printf "a credentials.%s file.\n" "$2"
            exit 1
        elif ! file_contains_aws_keys "$HOME"/.aws/credentials."$2"; then
            print_warning "Profile mis-configured"
            printf "\n"
            printf "Your config file does not contain your AWS credentials:\n"
            printf "$HOME/.aws/config.%s\n" "$2"
            printf "\n"
            printf "Your credentials file does not contain your AWS credentials:\n"
            printf "%s/.aws/credentials.%s\n" "$HOME" "$2"
            printf "\n"
            printf "Add your credentials to either of these two files:\n"
            printf "%s/.aws/config.%s\n" "$HOME" "$2"
            printf "%s/.aws/credentials.%s\n" "$HOME" "$2"
            exit 1
        fi
    fi

    if file_is_symlink "$HOME/.aws/config"; then
        unlink "$HOME/.aws/config"
    fi

    if file_is_symlink "$HOME/.aws/credentials"; then
        unlink "$HOME/.aws/credentials"
    fi

    ln -s "$HOME/.aws/config.$2" "$HOME/.aws/config"

    if [ -e "$HOME/.aws/credentials.$2" ]; then
        ln -s "$HOME/.aws/credentials.$2" "$HOME/.aws/credentials"
    fi

    printf "Profile now set to: %s\n" "${BOLD}${GREEN}$2${RESET_FONT}"
    exit 0

fi

######################
## command: version ##
######################

if [ "$1" = "version" ] || [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
    printf "__release_version__\n"
    printf "Copyright (C) __release_date__ Kris Anderson\n"
    printf "Source available at https://github.com/kris-anderson/awsprofile\n"
    exit 0
fi

############################
## command: initial-setup ##
############################

if [ "$1" = "initial-setup" ]; then
    printf "%sTake the content from these files:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "%s/.aws/config\n" "$HOME"
    printf "%s.aws/credentials\n" "$HOME/"
    printf "\n"
    printf "%sand move them to a new file that follows this naming convention:%s\n" "${BOLD}" "${RESET_FONT}"
    arrow_icon "$HOME/.aws/config.your_profile_name"
    printf "\n"
    printf "%sExamples%s\n" "${BOLD}" "${RESET_FONT}"
    arrow_icon "$HOME/.aws/config.personal"
    arrow_icon "$HOME/.aws/config.work"
    arrow_icon "$HOME/.aws/config.whatever"
    printf "\n"
    printf "%sEach config file's contents should look similar to this:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "==============================================================\n"
    printf "[default]\n"
    printf "aws_access_key_id=AK##################\n"
    printf "aws_secret_access_key=8t######################################\n"
    printf "region=us-west-1\n"
    printf "output=json\n"
    printf "==============================================================\n"
    printf "\n"
    printf "Change the contents to match your configuration, but keep [default]\n"
    printf "as the first line for each config file\n"
    printf "\n"
    printf "%sNote:%s\n" "${BOLD}" "${RESET_FONT}"
    printf "You can also separate the credentials from your config files\n"
    printf "if you prefer. Keep [default] as the first line in each credential\n"
    printf "file. If you choose to do this, your ~/.aws/ directory may look like:\n"
    arrow_icon "$HOME/.aws/config.personal"
    arrow_icon "$HOME/.aws/config.work"
    arrow_icon "$HOME/.aws/config.whatever"
    arrow_icon "$HOME/.aws/credentials.personal"
    arrow_icon "$HOME/.aws/credentials.work"
    arrow_icon "$HOME/.aws/credentials.whatever"
    printf "\n"
    printf "%sDelete the default files after you create your custom config files:%s\n" "${BOLD}" "${RESET_FONT}"
    arrow_icon "$HOME/.aws/config"
    arrow_icon "$HOME/.aws/credentials"
    exit 0
fi

#######################
## command not found ##
#######################

if no_command_provided; then
    print_command_missing "No command provided"
else
    print_command_missing "Command not found"
fi
